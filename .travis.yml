dist: trusty

osx_image: xcode8.3

sudo: false

language: cpp

cache:
  - apt: true
    directories:
      - $HOME/.cache/cuda
      - $HOME/AMDAPPSDK-3.0
  - ccache: true

addons:
  apt:
    packages: &default_packages
      - cmake
      - libmicrohttpd-dev
      - libssl-dev
      - libhwloc-dev
      - expect

env:
  global:
    - CUDA_ROOT: $HOME/.cache/cuda
    - OpenCL_ROOT: $HOME/AMDAPPSDK-3.0

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *default_packages
            - gcc-5
            - g++-5
      env:
        - CMAKE_CXX_COMPILER=g++-5
        - CMAKE_C_COMPILER=gcc-5
        - XMRSTAK_CMAKE_FLAGS="-DCUDA_ARCH=30 -DOpenCL_ENABLE=ON"
        - LABEL="linux-gcc-5-CPU-NVIDIA-AMD"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *default_packages
            - gcc-6
            - g++-6
      env:
        - CMAKE_CXX_COMPILER=g++-6
        - CMAKE_C_COMPILER=gcc-6
        - XMRSTAK_CMAKE_FLAGS="-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF"
        - LABEL="linux-gcc-6-CPU"

    # test with disabled HWLOC, MICROHTTPD, OpenSSL and no accelerators
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *default_packages
            - gcc-6
            - g++-6
      env:
        - CMAKE_CXX_COMPILER=g++-6
        - CMAKE_C_COMPILER=gcc-6
        - XMRSTAK_CMAKE_FLAGS="-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF -DHWLOC_ENABLE=OFF -DOpenSSL_ENABLE=OFF -DMICROHTTPD_ENABLE=OFF"
        - LABEL="linux-gcc-6-CPU-BARE"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *default_packages
            - gcc-7
            - g++-7
      env:
        - CMAKE_CXX_COMPILER=g++-7
        - CMAKE_C_COMPILER=gcc-7
        - XMRSTAK_CMAKE_FLAGS="-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF"
        - LABEL="linux-gcc-7-CPU"

    - os: osx
      compiler: gcc
      env:
        - XMRSTAK_CMAKE_FLAGS="-DCUDA_ENABLE=OFF -DOpenCL_ENABLE=OFF"
        - LABEL="osx-gcc-7-CPU"

before_install:
  - . CI/checkPRBranch
  - if [ $TRAVIS_OS_NAME = osx ] ; then
      brew update;
    fi
  - export PATH=$CUDA_ROOT/bin:$PATH

script:
  - travis_retry ./scripts/preinstall.sh
  - if [ $TRAVIS_OS_NAME = osx ]; then
      cmake -DXMR-STAK_COMPILE=generic -DMICROHTTPD_ENABLE=OFF -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl ${XMRSTAK_CMAKE_FLAGS} .;
    else
      cmake -DXMR-STAK_COMPILE=generic -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} ${XMRSTAK_CMAKE_FLAGS} .;
    fi;
  - make VERBOSE=1 install -j2
  - ./bin/xmr-stak --help

before_deploy:
- if [[ "${TRAVIS_TAG}" == "" ]]; then export TRAVIS_TAG=${TRAVIS_COMMIT} ; fi
- cd bin
- TARGETS="xmr-stak libxmr-stak-asm.a libxmr-stak-c.a libxmr-stak-backend.a"
- if [ $TRAVIS_OS_NAME != osx ]; then strip ${TARGETS} ; fi
- rm -rf xmr-stak-${TRAVIS_TAG}
- mkdir xmr-stak-${TRAVIS_TAG}
- cp ${TARGETS} xmr-stak-${TRAVIS_TAG}
- if [[ -e libxmrstak_cuda_backend.so ]]; then cp libxmrstak_cuda_backend.so xmr-stak-${TRAVIS_TAG} ; fi
- if [[ -e libxmrstak_opencl_backend.so ]]; then cp libxmrstak_opencl_backend.so xmr-stak-${TRAVIS_TAG} ; fi
- cp ../LICENSE ../THIRD-PARTY-LICENSES xmr-stak-${TRAVIS_TAG}
- tar cvfz xmr-stak-${TRAVIS_TAG}-${LABEL}.tar.gz xmr-stak-${TRAVIS_TAG}/
- rm -rf builds
- mkdir builds
- cp xmr-stak-${TRAVIS_TAG}-${LABEL}.tar.gz builds